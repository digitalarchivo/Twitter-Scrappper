import sys
import time
import shutil
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.common.exceptions import TimeoutException

if len(sys.argv) != 2:
    print("Usage: python x.py <twitter_username>")
    sys.exit(1)

username = sys.argv[1].strip()
url = f"https://twitter.com/{username}/following"
output_file = f"{username}_following.txt"

options = Options()
options.add_argument("--headless")
options.add_argument("--disable-gpu")
options.add_argument("--no-sandbox")
options.add_argument("--window-size=1920,1080")
options.add_argument("--disable-dev-shm-usage")

chromedriver_path = shutil.which("chromedriver")
if chromedriver_path is None:
    raise RuntimeError("chromedriver binary not found in PATH")

driver = webdriver.Chrome(service=Service(chromedriver_path), options=options)
driver.get(url)

wait = WebDriverWait(driver, 15)
try:
    wait.until(EC.presence_of_element_located((By.XPATH, '//div[@data-testid="UserCell"]')))
except TimeoutException:
    print(f"Timed out waiting for UserCell elements on {url}")
    driver.quit()
    sys.exit(1)

# Handle potential popups (like login modal) by clicking close buttons if found
try:
    close_btn = driver.find_element(By.XPATH, '//div[@role="button" and contains(@aria-label,"Close")]')
    close_btn.click()
    time.sleep(2)
except:
    # No popup found; continue
    pass

# Scroll to load more entries
last_height = driver.execute_script("return document.body.scrollHeight")
for _ in range(15):
    driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
    time.sleep(3)
    new_height = driver.execute_script("return document.body.scrollHeight")
    if new_height == last_height:
        break
    last_height = new_height

# Extract usernames
elements = driver.find_elements(By.XPATH, '//div[@data-testid="UserCell"]//a[@role="link" and starts-with(@href, "/")]')

seen = set()
usernames = []
for el in elements:
    href = el.get_attribute("href")
    if not href:
        continue

    # Extract the path part only (after domain)
    if "twitter.com" in href:
        handle = href.split("twitter.com/")[-1].split("?")[0].strip("/")
        if not handle or handle.lower() == username.lower() or "/" in handle:
            continue  # skip invalid or self links

        if handle not in seen:
            usernames.append(handle)
            seen.add(handle)

with open(output_file, "w", encoding="utf-8") as f:
    for handle in usernames:
        f.write(handle + "\n")

print(f"Saved {len(usernames)} usernames to {output_file}")
driver.quit()
